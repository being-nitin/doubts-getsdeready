24th jan 2024

1. https://leetcode.com/problems/single-number-ii/

class Solution {
    public int singleNumber(int[] nums) {
        long ans = 0;
        int p=0;
        int setBitsTotal = 0;
        for(int i=0;i<32;i++){
            setBitsTotal = 0;
            for(int j=0;j<nums.length;j++){
                setBitsTotal = setBitsTotal+ (nums[j]&1);
                nums[j] = nums[j]>>1;
            }
            setBitsTotal = setBitsTotal%3;
            ans = ans + (setBitsTotal)*(long)Math.pow(2,p);
            p++;
        }
      return (int)ans;
    
    }
}

https://www.geeksforgeeks.org/problems/find-sum-of-different-corresponding-bits-for-all-pairs4652/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

class Solution{
    static int countBits(int N, long A[])
    {
        long ans = 0;
        int mod = 1000000007;
        for(int i=0;i<32;i++){
            long setBits = 0;
            long unsetBits = 0;
            for(int j=0;j<A.length;j++){
                if((A[j]&(1<<i))!=0){
                    setBits++;
                }
            }
            unsetBits = A.length-setBits;
            long diff = (setBits*unsetBits)*2;
            ans = ans+diff;
        }
        return (int)ans%mod;
    }
}

https://leetcode.com/problems/find-peak-element/

class Solution {
    public int findPeakElement(int[] nums) {
     // Modified Binary Search
        int low = 0;
        int high = nums.length-1;
        while(low<high){
            int mid = low + (high-low)/2;
            if(nums[mid]>nums[mid+1]){
                high = mid;
            }
            else{
                low = mid+1;
            }
        }
        return low;
        
    }
}

https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
    public int search(int[] nums, int target) {
       int low = 0;
    int high = nums.length-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(nums[mid]==target){
                return mid;
            }
            
//             in which sorted part i am
            if(nums[low]<=nums[mid]){
//                 my target is lying in that part 
                if(target>=nums[low] && target<nums[mid]){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
            else{
                if(target>nums[mid] && target<=nums[high]){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
        }
        return -1;
    
    }
                   }

https://leetcode.com/problems/single-element-in-a-sorted-array/

class Solution {
    public int singleNonDuplicate(int[] nums) {
          // Violation Process will give me my answer
        int low = 0;
        int high = nums.length-1;
        while(low<high){
            int mid = (low+high)/2;
            if(mid%2==1){
                mid--;
            }
            if(nums[mid]==nums[mid+1]){
                low = mid+2;
            }
            else{
                high = mid;
            }
        }
        return nums[low];
        
    }
}

https://leetcode.com/problems/minimum-size-subarray-sum/submissions/

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int a = 0,b=0,currSum = 0;
        int min  = Integer.MAX_VALUE;
        for(b=0;b<nums.length;b++){
            currSum = currSum+nums[b];
            while(currSum>=target){
                min = Math.min(b-a+1,min);
                currSum = currSum-nums[a];
                a++;
            }
        }
        return min==Integer.MAX_VALUE ?0:min;
    }
}

https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

class Solution {
    public boolean search(int[] nums, int target) {
//      Modified Binary Search
        int low = 0;
        int high = nums.length-1;
        while(low<=high){
            int mid = low +(high-low)/2;
            if(nums[mid]==target){
                return true;
            }
            while(low<mid && nums[low]==nums[mid]){
                low++;
            }
            while(high>mid && nums[high]==nums[mid]){
                high--;
            }
            if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<nums[mid]){
                    high = mid-1;
                }
                else{
                    low = mid+1;
                }
            }
            else{
                if(target>nums[mid] && target<=nums[high]){
                    low = mid+1;
                }
                else{
                    high = mid-1;
                }
            }
        }
        return false;
    }
}

https://leetcode.com/problems/median-of-two-sorted-arrays/submissions/

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] finalArr = new int[nums1.length+nums2.length];
        System.arraycopy(nums1,0,finalArr,0,nums1.length);
        System.arraycopy(nums2,0,finalArr,nums1.length,nums2.length);
        Arrays.sort(finalArr);
        int start = 0;
        int end = finalArr.length-1;
        int mid = (start+end)/2;
        if(finalArr.length%2==0){
            return (double)(finalArr[mid]+finalArr[mid+1])/2;
        }
        else{
            return finalArr[mid];
        }
    }
}
